trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*
  paths:
    exclude:
    - README.md
    - CHANGELOG.md

# Stage to run the tests on, each stage has a job for each of the OS types and configurations we test against. Each job
# has the following steps;
#
#     1. Run the ./build.ps1 script to test the module with the psake build
#     2. Publish the Pester test results to Azure Pipelines
#     3. Publish the Build folder for that node which contains the processed module ready for publishing.
stages:
- stage: Test
  jobs:
  - job: TestLinuxPSCore
    displayName: Linux PowerShell Core
    pool:
      vmImage: ubuntu-16.04
    steps:
    - script: pwsh -File ./build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: Linux PowerShell Core
        targetPath: Build

  - job: TestWindowsPSDesktop
    displayName: Windows PowerShell Desktop
    pool:
      vmImage: windows-2019
    steps:
    - script: powershell.exe -File .\build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: Windows PowerShell Desktop
        targetPath: Build

  - job: TestWindowsPSDesktopx86
    displayName: Windows PowerShell Desktop - x86
    pool:
      vmImage: windows-2019
    steps:
    - script: '"%windir%\SysWOW64\WindowsPowerShell\v1.0\powershell.exe" -File .\build.ps1'
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: Windows PowerShell Desktop - x86
        targetPath: Build

  - job: TestWindowsPSCore
    displayName: Windows PowerShell Core
    pool:
      vmImage: windows-2019
    steps:
    - script: pwsh.exe -File .\build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: Windows PowerShell Core
        targetPath: Build

# Stage to publish the PowerShell module to PSGallery and optionally the GitHub repo. This only runs when a release has
# been made on GitHub that starts with v{version}.
- stage: Publish
  condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/v'))
  jobs:
  - job: Publish
    pool:
      vmImage: windows-2019
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: Windows PowerShell Desktop
        targetPath: Build

    - pwsh: |
        Install-Module -Name PSDeploy -Force
        Invoke-PSDeploy -Path ./deploy.psdeploy.ps1 -Recurse $false -Force -Tags Release
      displayName: Publish Nupkg
      env:
        PSGALLERY_TOKEN: $(psgallery_token)
        GITHUB_TOKEN: $(github_token)  # Omit to not publish the Nupkg on the GitHub release asset
