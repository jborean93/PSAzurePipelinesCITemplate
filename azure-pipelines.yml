trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*
  paths:
    exclude:
    - README.md
    - CHANGELOG.md

stages:
- stage: Test
  jobs:
  - job: TestLinuxPSCore
    displayName: Linux PowerShell Core
    pool:
      vmImage: ubuntu-16.04
    steps:
    - script: pwsh -File ./build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: jaCoCo
        summaryFileLocation: Build/Coverage_PS*.xml

  - job: TestWindowsPSDesktop
    displayName: Windows PowerShell Desktop
    pool:
      vmImage: windows-2019
    steps:
    - script: powershell.exe -File .\build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: jaCoCo
        summaryFileLocation: Build/Coverage_PS*.xml

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: module
        targetPath: Build/$(Build.Repository.Name)

  - job: TestWindowsPSCore
    displayName: Windows PowerShell Core
    pool:
      vmImage: windows-2019
    steps:
    - script: pwsh.exe -File .\build.ps1
      displayName: Run tests
      env:
        CODECOV_TOKEN: $(codecov_token)

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: Build/TestResults_PS*.xml

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: jaCoCo
        summaryFileLocation: Build/Coverage_PS*.xml

- stage: Publish
  #condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/v'))
  jobs:
  - job: Publish
    pool:
      vmImage: windows-2019
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: amodule
        targetPath: Build
    - pwsh: |
        Install-Module -Name PSDeploy -Force
        Get-ChildItem Build
        #Invoke-PSDeploy -Path ./deploy.psdeploy.ps1 -Recurse $false -Force -Tags Release
      displayName: PowerShell Gallery
      env:
        NugetApiKey: $(nuget_api_key)
